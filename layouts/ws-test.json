{
  "b": 209,
  "disableInputWhenNotFocused": true,
  "mangledName": "WS_32test",
  "name": "WS test",
  "oglFOV": 90,
  "oglZFar": 500,
  "oglZNear": 1,
  "r": 209,
  "standardSortMethod": true,
  "stopSoundsOnStartup": true,
  "title": "",
  "v": 209,
  "uiSettings": {
    "grid": false,
    "gridB": 255,
    "gridG": 180,
    "gridHeight": 32,
    "gridOffsetX": 0,
    "gridOffsetY": 0,
    "gridR": 158,
    "gridType": "rectangular",
    "gridWidth": 32,
    "snap": true,
    "windowMask": false,
    "zoomFactor": 1
  },
  "objectsGroups": [],
  "variables": [],
  "instances": [
    {
      "angle": 0,
      "customSize": false,
      "height": 0,
      "layer": "",
      "locked": false,
      "name": "NewObject",
      "persistentUuid": "6a4fb2bb-77f1-4be6-95c4-e11e741c9295",
      "width": 0,
      "x": 780,
      "y": 390,
      "zOrder": 1,
      "numberProperties": [],
      "stringProperties": [],
      "initialVariables": []
    },
    {
      "angle": 0,
      "customSize": false,
      "height": 0,
      "layer": "",
      "locked": false,
      "name": "Clock",
      "persistentUuid": "8b9269c7-9d3f-4dc7-ab5f-85cef69d035d",
      "width": 0,
      "x": 819,
      "y": 705,
      "zOrder": 2,
      "numberProperties": [],
      "stringProperties": [],
      "initialVariables": []
    }
  ],
  "objects": [
    {
      "bold": false,
      "italic": false,
      "name": "NewObject",
      "smoothed": true,
      "tags": "",
      "type": "TextObject::Text",
      "underlined": false,
      "variables": [],
      "behaviors": [],
      "string": "Text",
      "font": "",
      "characterSize": 20,
      "color": {
        "b": 0,
        "g": 0,
        "r": 0
      }
    },
    {
      "name": "Clock",
      "tags": "",
      "type": "PrimitiveDrawing::Drawer",
      "variables": [],
      "behaviors": [],
      "fillOpacity": 255,
      "outlineSize": 1,
      "outlineOpacity": 255,
      "fillColor": {
        "b": 255,
        "g": 255,
        "r": 255
      },
      "outlineColor": {
        "b": 0,
        "g": 0,
        "r": 0
      },
      "absoluteCoordinates": false,
      "clearBetweenFrames": true
    }
  ],
  "events": [
    {
      "colorB": 228,
      "colorG": 176,
      "colorR": 74,
      "creationTime": 0,
      "disabled": false,
      "folded": false,
      "name": "",
      "source": "",
      "type": "BuiltinCommonInstructions::Group",
      "events": [
        {
          "disabled": true,
          "folded": true,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "const vars = runtimeScene.getVariables()\nconst wsVar = vars.get('WS')\nconst secVar = vars.get('Sec')\n\n// const ws = new WebSocket('ws://sangervasi.net')\nconst ws = new WebSocket('ws://localhost:42992')\n\nlet t = Date.now()\n\nsetInterval(() => {\n    ws.send('client says')\n}, 500)\n\nws.addEventListener('message', (messageEvent) => {\n    const data = JSON.parse(messageEvent.data.toString())\n    console.log('client heard:', data)\n    const ts = (Date.now() - t) / 1000 \n    wsVar.setString(JSON.stringify({\n        ts,\n        data\n    }, null, 2))\n    secVar.setNumber(ts)\n})",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ]
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "class s{constructor(s){this.M=null,this.P=null,this.T=s}type(e){return new s(e)}payload(){return new s(this.T)}message(s){return this.T===s.type}build(s){return s}}const e=new s(\"\"),t=e.type(\"echo\").payload(),n=e.type(\"gnop.join\").payload(),o=e.type(\"gnop.joined\").payload(),i=e.type(\"gnop.point\").payload(),a=e.type(\"session.created\").payload();e.type(\"session.closed\").payload();const r=()=>{const s={};return s.promise=new Promise((e,t)=>{s.resolve=e,s.reject=t}),s};Object.assign(globalThis,{Gnop:{WsClient:class{constructor(s){this.options=s,this.state=\"init\",this.promises={},this.handleMessage=s=>{const e=(s=>{let e,t=\"\";try{e=JSON.parse(s.toString())}catch(s){t=s.message}return\"\"!==t?{type:\"error\",sessionUuid:\"\",payload:{error:t}}:\"object\"==typeof(n=e)&&null!==n&&\"type\"in n?e:{type:\"error\",sessionUuid:\"\",payload:{error:\"Invalid message structure\"}};var n})(s.data);var n,i;\"creating\"!==this.state?\"joining\"!==this.state?t.message(e)?console.log(\"client heard:\",e):console.warn(\"Unhandled messag:\",e):o.message(e)?(console.log(\"Joined\",this.sessionUuid),this.state=\"joined\",null==(n=this.promises.join)||n.resolve()):console.warn(\"Expected joined message, got:\",e):a.message(e)?(console.info(\"Created\",e.sessionUuid),this.state=\"created\",this.sessionUuid=e.sessionUuid,null==(i=this.promises.connect)||i.resolve()):console.warn(\"Expected created message, got:\",e)},this.handleOpen=()=>{console.info(\"Opened\")},this.handleClose=()=>{this.state=\"init\",console.info(\"Closed\")},this.handleError=()=>{this.state=\"init\",console.info(\"Errored\")}}connect(){console.log(\"Connecting\");const s=new WebSocket(this.options.host);return this.ws=s,s.onopen=this.handleOpen,s.onclose=this.handleClose,s.onerror=this.handleError,s.addEventListener(\"message\",this.handleMessage),this.state=\"creating\",this.promises.connect=r(),this.promises.connect.promise}isReady(){return Boolean(this.sessionUuid)&&Boolean(this.ws)&&\"created\"===this.state}join(){if(!this.isReady())return void console.warn(\"Cannot join from state:\",this.state);const s=n.build({type:\"gnop.join\",sessionUuid:this.sessionUuid,payload:{name:this.options.name||\"Name\"}});return console.info(\"Client joining:\",s),this.state=\"joining\",this.ws.send(JSON.stringify(s)),this.promises.join=r(),this.promises.join.promise}speak(){if(!this.isReady())return void console.warn(\"Cannot speak from state:\",this.state);const s=t.build({type:\"echo\",sessionUuid:this.sessionUuid,payload:(new Date).toISOString()});console.info(\"Client speaking:\",s),this.ws.send(JSON.stringify(s))}point(s,e){if(!this.isReady())return void console.warn(\"Cannot send point from state:\",this.state);const t=i.build({type:\"gnop.point\",sessionUuid:this.sessionUuid,payload:{x:s,y:e}});console.info(\"Client sending point:\",t),this.ws.send(JSON.stringify(t))}}}});\n//# sourceMappingURL=gnop.modern.js.map\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ]
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "const { Gnop } = globalThis\n\nconst vars = runtimeScene.getVariables()\nconst wsVar = vars.get('WS')\n\nwsVar.setString(Gnop.WsClient ? \"Has client\" : \"No client\")\n\nconst fun = async () => {\n    const client = new Gnop.WsClient({\n        host: 'ws://sangervasi.net',\n        name: \"Game WS test\"\n    })\n\n    console.log({ client })\n    \n    const cp = client.connect()\n    console.log({ cp })\n    await cp\n    wsVar.setString(`(${client.state}) Connected ${client.sessionUuid}`)\n\n    \n    const jp = client.join()\n    console.log({jp})\n    await jp\n    wsVar.setString(`(${client.state}) Joined ${client.sessionUuid}`)\n} \n\nfun()\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": true
            }
          ]
        }
      ],
      "parameters": []
    },
    {
      "colorB": 228,
      "colorG": 176,
      "colorR": 74,
      "creationTime": 0,
      "disabled": false,
      "folded": false,
      "name": "",
      "source": "",
      "type": "BuiltinCommonInstructions::Group",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "TextObject::String"
              },
              "parameters": [
                "NewObject",
                "=",
                "VariableString(WS)"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "PrimitiveDrawing::Circle"
              },
              "parameters": [
                "Clock",
                "0",
                "0",
                "100"
              ],
              "subInstructions": []
            }
          ],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "Deg",
                    "=",
                    "ToRad(-90 + (360 / 60) * Variable(Sec))"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "PrimitiveDrawing::LineV2"
                  },
                  "parameters": [
                    "Clock",
                    "100",
                    "100",
                    "100 * (1 + cos(Variable(Deg)))",
                    "100 * (1 + sin(Variable(Deg)))",
                    "10"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            }
          ]
        }
      ],
      "parameters": []
    }
  ],
  "layers": [
    {
      "ambientLightColorB": 0,
      "ambientLightColorG": 0,
      "ambientLightColorR": 0,
      "followBaseLayerCamera": false,
      "isLightingLayer": false,
      "name": "",
      "visibility": true,
      "cameras": [
        {
          "defaultSize": true,
          "defaultViewport": true,
          "height": 0,
          "viewportBottom": 1,
          "viewportLeft": 0,
          "viewportRight": 1,
          "viewportTop": 0,
          "width": 0
        }
      ],
      "effects": []
    }
  ],
  "behaviorsSharedData": []
}